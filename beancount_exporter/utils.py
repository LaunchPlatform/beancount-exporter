import functools
import pathlib
import typing


def _relative_to(path: str, base_path: pathlib.Path) -> str:
    if path.startswith("<") and path.endswith(">"):
        # There are many cases where an entry could be generated by the plugin, and
        # the file name could be something like `<auto_accounts>`. To avoid the error
        # of calling `relative_to` with an invalid path, we are returning the plugin
        # special filename as is
        return path
    return str(pathlib.Path(path).relative_to(base_path))


def strip_base_path(paths: str | list[str], base_path: pathlib.Path) -> str | list[str]:
    """Strip the base path off the given path

    :param paths: the path to strip off, could be a list of path or just one path
    :param base_path: the base path
    :return: path with base path stripped
    """
    if isinstance(paths, typing.List):
        return list(map(functools.partial(_relative_to, base_path=base_path), paths))
    else:
        return _relative_to(paths, base_path)
